1)
index
show
new
create
edit
update
delete

get - used when request sent to index, users show page, or anything that doesnt have to do with creating or editing content
post- used to first save information into the db (new renders form, create handles submission of form)
put - used when resubmitting sometime that was already in db(edit handles rendering of form with data in it, update handles submission of modified form)
delete - used to delete a record from db (destroy)
2)
rest is the main arcitecutual design the stateless protocoled web. It involves exposing certain actions to the client, allowing them to manipulate the data of an application, usually through HTTP's 4 actions -- get, put, post, delete. When 'resources' is put into the routes file of a rails app, it creates the actions used to carry out HTTP's 4 main actions, through index, show, new, create, update, and destroy.
3)
model backed forms tie the form to a model/database, whereas a non-model backed form doesnt.
4)
form_for generates the appropriate form tag, and yields a form builder that knows the object the form is about. Input fields are created by calling methods on the form builder, which means they are able to generate the appropriate names and default values corresponding to the model attr. Conventions in the generated field names allow controllers to recieve form data nicely structured in params with no effort.
5)
def create
  @here = Here.new(here_params)

  if @here.save
    flash[:notice] = "Your here was successfully saved"
    redirect_to that_path
  else
    render :new
  end
end

def update
  @this = This.find(params[:id])

  if @this.update(these_params)
    flash[:notice] = "this was successfully created"
    redirect_to this_path
  else
    render :new
  end
end
6)
Rails validators are triggered when data is attempted to be submitted to the db, a method that can be called on the object being instantiated is usuable, called .errors. The errors pertaining to the instantiated object are stored in .errors, and can be accessed using @object.errors.full_messages. To actually output the errors to a client, showing them the errors on their most recent submission, you do
<% @object.errors.full_messages.each do |msg| %>
  <%= msg %>
<% end %>
anywhere on the new/edit page. When the user successfully .save's their instantiated object, they are usually redirected. When their was an error due to validations, the user never leaves the new/edit page and the new/edit template is re-rendered, this time with the errors created from form validations.
7)
methods you can defined under the helpers' folder, under the app directory, that allow you to extract complicated logic or reusable functionality.
8)
similar to helpers, but used to render subtemplates in rails. Subtemplates are usually a chunk of code where helpers are usually a single method.
9)
You want to use helpers to reduce code duplication, and partials to render a chunk of html that is usually used by many views.
10)
when you want to create a form that is not tied to a model. Generated by pure html.



























